Gameboard factory function:
    10x10 grid.
    Be able to place ships at specific coordinates considering it's length and orientation.
    Should have a receive attack function that determines whether or not the attack hit a ship,
        send the hit() to the correct ship and recordes the coordinates of the missed shot.
    Should report if all of it's ships have been sunk.

    Data structure:
        Make an object that has 10 arrays, each array represents a row of the board.
        Each array has 10 items, representing the columns of the board.
        The ship positions will be stored in this object with a number between 1 and 5
            that will correlate it to the ship node in the gameboard tree.
        The receiveAttack() will check if the attackCoordinates cell isnt equal to a empty string.
            A empty string will represent a cell that hasn't been attacked and doesn't have a ship there.
            In the case that if statement is true, it will compare the number to a switch case.
            If the cell has a "1" for example, it means that the "Ship #1" has been attacked.
            So it should call the this.ship1.hit() to increase the hit's number.
            When executing this function the object will check if the ship is sunk.


Insert ship & handle attacks:

    The 'ship objects' don't need a coordinate storage.
    Instead the 'board object' will be populated with:
        '_' Empty cells.
        'X' Attacked cells.
        'node' Ship cells.
    When receiving an attack that action will be processed by the gameboard().
        The object created with that f() will have a receiveAttack().
        That f() will check the 'board' to determine:
            If board[letterCoordinate][numberCoordinate] isEqual to '_' then set cell as 'X'
            If board[letterCoordinate][numberCoordinate] isEqual to 'X' then throw Error
            If board[letterCoordinate][numberCoordinate] isEqual to 'node' then call node.hit()
        